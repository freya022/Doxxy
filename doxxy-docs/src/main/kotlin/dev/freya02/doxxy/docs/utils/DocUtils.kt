package dev.freya02.doxxy.docs.utils

import dev.freya02.doxxy.docs.declarations.JavadocClass
import dev.freya02.doxxy.docs.declarations.JavadocMethod
import dev.freya02.doxxy.docs.declarations.returnTypeNoAnnotations
import dev.freya02.doxxy.docs.exceptions.DocParseException
import org.jsoup.nodes.Document
import org.jsoup.nodes.Element

internal object DocUtils {

    fun getSimpleSignature(elementId: String): String {
        return StringBuilder().apply {
            val index = elementId.indexOf('(')
            append(elementId, 0, index)

            val simpleParameters = elementId.substring(index + 1, elementId.length - 1).split(",")
                .filter { parameter -> parameter.isNotBlank() }
                .joinToString(
                    prefix = "(",
                    postfix = ")",
                    separator = ", "
                ) { parameter -> DecomposedName.getSimpleClassName(parameter.trim()) }

            append(simpleParameters)
        }.toString()
    }

    fun getSimpleAnnotatedSignature(targetClassdoc: JavadocClass, method: JavadocMethod) = buildString(100) {
        method.methodAnnotations?.let { appendLine(it) }

        if (method.isStatic) append("static ")
        append(targetClassdoc.className)
        append("#")
        append(method.methodName)

        append(method.parameters.joinToString(", ", "(", ")") { parameter ->
            "${parameter.annotations.joinToString(" ")}${parameter.simpleType} ${parameter.name}"
        })

        append(" : ")
        append(method.returnTypeNoAnnotations)
    }

    fun Document.isJavadocVersionCorrect(): Boolean {
        val head: Element = selectFirst("head") ?: throw DocParseException("Javadoc at '${baseUri()}' is not javadoc 17")
        val nodes = head.childNodes()
        if (nodes.size < 2) return false

        val secondComment = nodes[1].attr("#comment")
        return "Generated by javadoc (17)" in secondComment
    }
}