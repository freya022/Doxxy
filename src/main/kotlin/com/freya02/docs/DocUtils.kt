package com.freya02.docs

import com.freya02.bot.utils.DecomposedName
import com.freya02.docs.data.ClassDoc
import com.freya02.docs.data.MethodDoc
import org.jsoup.nodes.Document
import org.jsoup.nodes.Element
import java.util.regex.Pattern

object DocUtils {
    private val DUPLICATED_ANNOTATION_PATTERN = Pattern.compile("(@.+)?\\s+\\1")
    private val ANNOTATION_PATTERN = Pattern.compile("@\\w*")

    fun getSimpleSignature(elementId: String): String {
        return StringBuilder().apply {
            val index = elementId.indexOf('(')
            append(elementId, 0, index)

            val simpleParameters = elementId.substring(index + 1, elementId.length - 1).split(",")
                .filter { parameter -> parameter.isNotBlank() }
                .joinToString(
                    prefix = "(",
                    postfix = ")",
                    separator = ", "
                ) { parameter -> DecomposedName.getSimpleClassName(parameter.trim()) }

            append(simpleParameters)
        }.toString()
    }

    fun getSimpleAnnotatedSignature(targetClassdoc: ClassDoc, methodDoc: MethodDoc): String {
        val fixedReturnType = methodDoc.getReturnTypeNoAnnotations()
        val effectiveAnnotations = if (methodDoc.methodAnnotations == null) "" else "${methodDoc.methodAnnotations}\n"

        return StringBuilder(effectiveAnnotations + targetClassdoc.className + "#" + methodDoc.methodName).apply {
            val methodParameters = methodDoc.methodParameters?.asString ?: return@apply

            val parameters = methodParameters.substring(1, methodParameters.length - 1).split(",")
                .joinToString(",\n", "(", ")") {
                    DUPLICATED_ANNOTATION_PATTERN.matcher(it).replaceAll("$1")
                }

            append(parameters)
        }.toString() + " : " + fixedReturnType
    }

    fun Document.isJavadocVersionCorrect(): Boolean {
        val head: Element = selectFirst("head") ?: throw DocParseException("Javadoc at '${baseUri()}' is not javadoc 17")
        val nodes = head.childNodes()
        if (nodes.size < 2) return false

        val secondComment = nodes[1].attr("#comment")
        return "Generated by javadoc (17)" in secondComment
    }

    private fun MethodDoc.getReturnTypeNoAnnotations(): String {
        return ANNOTATION_PATTERN.matcher(methodReturnType)
            .replaceAll("")
            .trim()
    }
}